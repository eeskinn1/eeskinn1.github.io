{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"","tags":["tag1","tag2"]},{"location":"#design-project","title":"Design Project","text":"<p>My name is Evan Skinner I am an ASU student pursuing a bachelors in Electrical Engineering. This webpage will serve as a repository for the files, work and photos of my design project for EGR314.</p>","tags":["tag1","tag2"]},{"location":"#project-role","title":"Project Role","text":"<p>My role in this project is the Sensing subsystem. My system will sense, using Infrared light, the rolling ball in order to activate the Magnetic coils on time.</p>","tags":["tag1","tag2"]},{"location":"#link-to-team-website","title":"Link to Team Website","text":"<p>Link to go to Team 310 Website</p>","tags":["tag1","tag2"]},{"location":"API/","title":"Sensor API","text":"","tags":["tag1","tag2"]},{"location":"API/#message-structure","title":"Message Structure","text":"<p>Start Byte (2 uint8_t)  Sender Address (uint8_t) Receiver Address (uint8_t) Message Type (uint8_t) Message (1-56 uint8_t) Stop Byte (2 uint8_t)</p>","tags":["tag1","tag2"]},{"location":"API/#team-definitions","title":"Team Definitions","text":"","tags":["tag1","tag2"]},{"location":"API/#team-bytes","title":"Team Bytes","text":"Type Byte Start AZ Stop YB","tags":["tag1","tag2"]},{"location":"API/#team-addresses","title":"Team Addresses","text":"Name Address Noah Brent N Evan Skinner E Kirk Volin K Hunter Hassebroek H Broadcast X","tags":["tag1","tag2"]},{"location":"API/#recieved-messages","title":"Recieved Messages","text":"","tags":["tag1","tag2"]},{"location":"API/#message-type-14-master-system-reset","title":"Message Type 14 - (Master System Reset)","text":"<ul> <li>Broadcast message from remote user on MQTT to trigger reset on the system. </li> <li>If RST is sent to the MQTT SUB, it will trigger this static message to reset all subsystems.</li> </ul> Byte 1: Sender Byte 2: Receiver Byte 3: Data Type Byte 4: Data Variable Name MQTT_ID BROADCAST_ID masterReset resetState Variable Type char char char uint8_t Min K X R 1 Max K X R 1 Example K X R 1","tags":["tag1","tag2"]},{"location":"API/#sent-messages","title":"Sent Messages","text":"","tags":["tag1","tag2"]},{"location":"API/#message-type-1-start-communication","title":"Message Type 1 (Start Communication)","text":"Byte 1: Sender Byte 2: Receiver Byte 3: Data Type Byte 4: Data Variable Name SENSOR_ID Broadcast_ID Uart_state Uart_ready Variable Type char char char uint8_t Min E X U 1 Max E X U 1 Example E X U 1","tags":["tag1","tag2"]},{"location":"API/#message-type-2-ball-speed","title":"Message Type 2 (Ball Speed)","text":"Byte 1: Sender Byte 2: Receiver Byte 3: Data Type Byte 4-: Data Variable Name SENSOR_ID HMI_ID Sensor_data Ball_speed Variable Type char char char uint8_t Min E H S 00 Max E H S 99 Example E H S 52","tags":["tag1","tag2"]},{"location":"API/#message-type-3-error","title":"Message Type 3 (Error)","text":"Byte 1: Sender Byte 2: Receiver Byte 3: Data Type Byte 4: Data Variable Name SENSOR_ID MQTT_ID Uart_state Uart_ready Variable Type char char char uint8_t Min E K F 1 Max E K F 1 Example E K F 1 <p>Error Types: 0: Incorrect / No Start Bit  1: Incorrect / No Address Bit 2: Incorrect / No Message Type 3: Incorrect / No Stop Bit 4: Incorrect Data Value in Valid Message 5: Bytes per Message Overflow</p>","tags":["tag1","tag2"]},{"location":"API/#code-handling","title":"Code Handling","text":"","tags":["tag1","tag2"]},{"location":"API/#message-handling","title":"Message Handling","text":"<ol> <li> <p>Identify the start of a message and begin copying it to an array for retransmission.</p> </li> <li> <p>When the Receiver Byte is identified, determine if it is addressed to me or broadcast:</p> <p>2a. If not mine, finish copying to the retransmission array and retransmit.</p> <p>2b. If mine, proceed to step 3.</p> <p>2c. If broadcast, copy to the retransmit array, retransmit, and continue to step 3.</p> </li> <li> <p>Identify the Message Type.</p> </li> <li> <p>Process the message and extract relevant sensor data.</p> </li> <li> <p>Discard the message after processing.</p> </li> <li> <p>Transmit the collected sensor data based on the message type.</p> </li> <li> <p>When a new message is received, restart from step one.</p> </li> </ol> <p>Each step includes error checking to validate the message. If a message fails validation, an error code and the sender's address will be transmitted. If characters are received outside of valid start and stop bits, they are ignored and discarded.</p>","tags":["tag1","tag2"]},{"location":"API/#errormessage-transmission-handling","title":"Error/Message Transmission Handling","text":"<ol> <li> <p>Whenever an event triggers data transmission (e.g., periodic sensor readings, error detection, or reset), begin constructing the message in an array.</p> </li> <li> <p>Start by adding the start bytes and the Sensor Subsystem address to a temporary array.</p> </li> <li> <p>Include the receiving address, which will typically be MQTT, HMI, or broadcast.</p> </li> <li> <p>Append the message type byte, following the defined messaging protocol.</p> </li> <li> <p>Add the sensor data and terminate the message with stop bytes.</p> </li> <li> <p>If a transmission is already in progress, wait for completion, apply a delay, then send.</p> </li> <li> <p>If no transmission is ongoing, send the message immediately.</p> </li> <li> <p>Clear the temporary sending array after transmission.</p> </li> </ol> <p>A group transmission schedule may be implemented to enhance message reliability and minimize data loss.</p>","tags":["tag1","tag2"]},{"location":"BOM%20and%20Hardware%20Order/","title":"Bill of Materials and Hardware Order","text":""},{"location":"BOM%20and%20Hardware%20Order/#bill-of-materials","title":"Bill of Materials","text":""},{"location":"BOM%20and%20Hardware%20Order/#purchase-request","title":"Purchase Request","text":""},{"location":"block%20diagram/","title":"Block Diagram","text":""},{"location":"block%20diagram/#sensor-block-diagram","title":"Sensor Block Diagram","text":"<p>\u00a9 2025 Evan Skinner. All rights reserved.</p>"},{"location":"component%20selection/","title":"Component Selection","text":""},{"location":"component%20selection/#voltage-regulator-selection","title":"Voltage Regulator Selection","text":"Solution 1 Pro Con LM2576HVS-3.3  - $8.45 - High Voltage Input  - 3 Amp output  - Easier to solder size - Lower Efficiency (75% @ 3.3V) Solution 2 Pro Con LM2674M-3.3  - $3.97 - 86% efficiency @ 3.3V  - Cheapest  - Easy to hand solder design - 500mA output Solution 3 Pro Con LM2676S-3.3  - $5.72 - 86% efficiency @ 3.3V  - 3A Output - Lower input Voltage <p>The LM2676S-3.3, Solution 3 is the optimal choice because it provides a high 3A output while maintaining 86% efficiency, reducing heat generation and power loss. Its 260 kHz switching frequency allows for smaller inductors and capacitors, making the design more compact and responsive to load changes compared to the lower-frequency LM2576HVS-3.3. While the LM2674M-3.3 is efficient, its 500mA limit is too low for my needs.</p>"},{"location":"component%20selection/#comparator-selection-","title":"Comparator Selection","text":"Solution 1 Pro Con LM393DT  - $0.20 - Widely available and cost-effective  - Operates over a wide voltage range (2V to 36V)  - Inexpensive  - Dual-channel -  Open-collector output requires a pull-up resistor  - Slower response time Solution 2 Pro Con TLV7022DGKR  - $0.84 - Ultra-low power consumption (only 6 \u00b5A per channel)  - Rail-to-rail input and output  - Works at lower voltages (1.6V to 5.5V) - Higher cost compared to LM393DT  - Lower output drive strength Solution 3 Pro Con MCP6562T-E/SN  - $0.76 - Faster response time  - Push-pull output  - 1.8V to 5.5V - Low Voltage range  - Higher power consumption than TLV7022 <p>The LM393DT is the best option for my application. The LM393DT is a low-power, high-precision dual comparator with open-collector output. It offers a wide supply voltage range, making it ideal for signal detection and sensor interfacing in compact, reliable systems. Its low offset voltage ensures stable performance. The fact that it is such a commonly used comparator means there will be ample resources for implementation.</p>"},{"location":"component%20selection/#shift-register-selection","title":"Shift Register Selection","text":"Solution 1 Pro Con SN74HC165DR  - $0.22 - 8 bit  - High speed  - Simple Serial Output - 5V Output Drive  - No Internal Latch Solution 2 Pro Con 74HC597D  - $0.54 - 3 PIC pins  - Inexpensive  - Built-in Latch -  Less Precise  - Slower than 74HC165  - Not as Common as SN74HC165 Solution 3 Pro Con CD74HCT597M96  - $1.16 - Integrated Storage Register  - Parallel Load Feature  - 3.3V compatibility - Most expensive  - Less Common  - Higher Power Consumption <p>The SN74HC165DR is a great choice because it allows 8 digital inputs to be read using only three microcontroller (PIC) pins, significantly reducing GPIO usage. It operates at high speed, making it well-suited for applications requiring fast data transfer. Additionally, at just $0.22, it is a very cost-effective solution for expanding digital inputs.</p>"},{"location":"component%20selection/#sensor-selection","title":"Sensor Selection","text":"Solution 1 Pro Con HiLetgo Infrared Emitter and Receiver  - $0.55 per pair - High Accuracy  - Fast Response Time  - Inexpensive - Requires Alignment Solution 2 Pro Con A1308KUA-1-T  - $1.26 - Accurate  - Easier to implement - Ball must be magnetized  - Interference from Coil Solution 3 Pro Con HC-SR04  - $5.95 - Easy to set up   - Not Light dependent - Expensive  - Slowest response time <p>The HiLetgo Infrared Emitter and Receiver is an excellent choice due to its high accuracy in detecting objects, making it ideal for precise ball-tracking applications. It also has a fast response time, ensuring real-time detection without significant delays. Additionally, at $0.55 per pair, it is cost-effective for implementing multiple detection points within budget. However, it requires proper alignment between the emitter and receiver, which may add complexity to installation and calibration.</p>"},{"location":"component%20selection/#microcontroller-selection","title":"Microcontroller Selection","text":"<p>The class of microcontrollers that we will be using is an 8-bit Microchip PIC microcontroller which has many forms and pin counts. This brand of microcontroller is appealing because of prior experience with this component. My responsibilities in this project is the sensing capabilities. So I will be using a series of 8 pairs of Infrared receivers and emitters to sense the passing of a metal ball prior to the activation of an electromagnetic coil causing the ball to accelerate. Because there is no digital sensor in our plans I am required to add a PISO Register Shift Chip in my components. So the infrared sensor will go to an ADC then to the chosen shift register then to my PIC microcontroller.</p> PIC Info Answer Model PIC18F27Q10 Product Page URL MicroChip Product Page Datasheet URL(s) Product Datasheet Application Notes URL(s) 5-Bit Digital-to-Analog Converter - Writing C-Code for PIC18F  - SPI Using MSSP on PIC18 - Using EUSART on PIC18 Vendor link Digikey Code Examples EUSART Receive Control Commands - EUSART Send Formatted Messages Using printf - Receiving Data as an SPI Device - Sensor Data Acquisition using 10-bit ADCC External Resources URL(s) PIC Forum Unit cost $1.60 Absolute Maximum Current for entire IC 350mA Supply Voltage Range 1.8V / 3.3 - 5V / 5.5V / ~5.5V Maximum GPIO current  (per pin) 25mA Required Programming Hardware, Cost, URL Programming: PG164100 - $15.30 Works with MPLabX? Yes Works with Microchip Code Configurator? Yes (See Below) Module # Available Needed GPIO 36x 6x ADC 35x 0x UART 2x 2x SPI 2x 2x I2C 2x 0x PWM 2x 0x ICSP 1x 1x Clock 2x 1x"},{"location":"component%20selection/#mplab-test","title":"MPlab Test","text":"<p>The PIC18F47Q10 provides ample pins for this configuration, and my MCC setup shows that each peripheral is allocated to dedicated pins with no overlapping assignments. Additionally, by matching the peripheral requirements with the microcontroller\u2019s available pins, we ensure communication and programming while maintaining flexibility for extra GPIO if needed. Overall,  my MCC configuration indicate that there are enough pins for all intended functions and no apparent errors in the pin assignments.</p>"},{"location":"component%20selection/#power-budget","title":"Power Budget","text":""},{"location":"schematic%20design/","title":"Schematic Design and Power Budget","text":""},{"location":"schematic%20design/#schematic","title":"Schematic","text":""},{"location":"schematic%20design/#pic-microcontroller-schematic","title":"PIC Microcontroller Schematic","text":""},{"location":"schematic%20design/#infrared-sensor-schematic","title":"Infrared Sensor Schematic","text":""},{"location":"schematic%20design/#pcb-design","title":"PCB Design","text":""},{"location":"schematic%20design/#pic-microcontroller-pcb-layout","title":"PIC Microcontroller PCB Layout","text":""},{"location":"schematic%20design/#infrared-sensor-pcb-layout","title":"Infrared Sensor PCB Layout","text":""},{"location":"schematic%20design/#files","title":"Files","text":"<p>Click here to access PDF and Zip Files</p> <p>Schematic made in Altium Designer.</p>"},{"location":"schematic%20design/#power-budget","title":"Power Budget","text":""},{"location":"static/node_modules/mathjax/","title":"MathJax","text":""},{"location":"static/node_modules/mathjax/#beautiful-math-in-all-browsers","title":"Beautiful math in all browsers","text":"<p>MathJax is an open-source JavaScript display engine for LaTeX, MathML, and AsciiMath notation that works in all modern browsers.  It was designed with the goal of consolidating the recent advances in web technologies into a single, definitive, math-on-the-web platform supporting the major browsers and operating systems.  It requires no setup on the part of the user (no plugins to download or software to install), so the page author can write web documents that include mathematics and be confident that users will be able to view it naturally and easily.  Simply include MathJax and some mathematics in a web page, and MathJax does the rest.</p> <p>Some of the main features of MathJax include:</p> <ul> <li> <p>High-quality display of LaTeX, MathML, and AsciiMath notation in HTML pages</p> </li> <li> <p>Supported in most browsers with no plug-ins, extra fonts, or special   setup for the reader</p> </li> <li> <p>Easy for authors, flexible for publishers, extensible for developers</p> </li> <li> <p>Supports math accessibility, cut-and-paste interoperability, and other   advanced functionality</p> </li> <li> <p>Powerful API for integration with other web applications</p> </li> </ul> <p>See http://www.mathjax.org/ for additional details about MathJax, and https://docs.mathjax.org for the MathJax documentation.</p>"},{"location":"static/node_modules/mathjax/#mathjax-components","title":"MathJax Components","text":"<p>MathJax version 3 uses files called components that contain the various MathJax modules that you can include in your web pages or access on a server through NodeJS.  Some components combine all the pieces you need to run MathJax with one or more input formats and a particular output format, while other components are pieces that can be loaded on demand when needed, or by a configuration that specifies the pieces you want to combine in a custom way.  For usage instructions, see the MathJax documentation.</p> <p>Components provide a convenient packaging of MathJax's modules, but it is possible for you to form your own custom components, or to use MathJax's modules directly in a node application on a server.  There are web examples showing how to use MathJax in web pages and how to build your own components, and node examples illustrating how to use components in node applications or call MathJax modules directly.</p>"},{"location":"static/node_modules/mathjax/#whats-in-this-repository","title":"What's in this Repository","text":"<p>This repository contains only the component files for MathJax, not the source code for MathJax (which are available in a separate MathJax source repository).  These component files are the ones served by the CDNs that offer MathJax to the web.  In version 2, the files used on the web were also the source files for MathJax, but in version 3, the source files are no longer on the CDN, as they are not what are run in the browser.</p> <p>The components are stored in the <code>es5</code> directory, and are in ES5 format for the widest possible compatibility.  In the future, we may make an <code>es6</code> directory containing ES6 versions of the components.</p>"},{"location":"static/node_modules/mathjax/#installation-and-use","title":"Installation and Use","text":""},{"location":"static/node_modules/mathjax/#using-mathjax-components-from-a-cdn-on-the-web","title":"Using MathJax components from a CDN on the web","text":"<p>If you are loading MathJax from a CDN into a web page, there is no need to install anything.  Simply use a <code>script</code> tag that loads MathJax from the CDN.  E.g.,</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>See the MathJax documentation, the MathJax Web Demos, and the MathJax Component Repository for more information.</p>"},{"location":"static/node_modules/mathjax/#hosting-your-own-copy-of-the-mathjax-components","title":"Hosting your own copy of the MathJax Components","text":"<p>If you want to host MathJax from your own server, you can do so by installing the <code>mathjax</code> package using <code>npm</code> and moving the <code>es5</code> directory to an appropriate location on your server:</p> <pre><code>npm install mathjax@3\nmv node_modules/mathjax/es5 &lt;path-to-server-location&gt;/mathjax\n</code></pre> <p>Note that we are still making updates to version 2, so include <code>@3</code> when you install, since the latest chronological version may not be version 3.</p> <p>Alternatively, you can get the files via GitHub:</p> <pre><code>git clone https://github.com/mathjax/MathJax.git mj-tmp\nmv mj-tmp/es5 &lt;path-to-server-location&gt;/mathjax\nrm -rf mj-tmp\n</code></pre> <p>Then (in either case) you can use a script tag like the following:</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"&lt;url-to-your-site&gt;/mathjax/tex-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>where <code>&lt;url-to-your-site&gt;</code> is replaced by the URL to the location where you moved the MathJax files above.</p> <p>See the documentation for details.</p>"},{"location":"static/node_modules/mathjax/#using-mathjax-components-in-a-node-application","title":"Using MathJax components in a node application","text":"<p>To use MathJax components in a node application, install the <code>mathjax</code> package:</p> <pre><code>npm install mathjax@3\n</code></pre> <p>(we are still making updates to version 2, so you should include <code>@3</code> since the latest chronological version may not be version 3).</p> <p>Then require <code>mathjax</code> within your application:</p> <pre><code>require('mathjax').init({ ... }).then((MathJax) =&gt; { ... });\n</code></pre> <p>where the first <code>{ ... }</code> is a MathJax configuration, and the second <code>{ ... }</code> is the code to run after MathJax has been loaded.  E.g.</p> <pre><code>require('mathjax').init({\nloader: {load: ['input/tex', 'output/svg']}\n}).then((MathJax) =&gt; {\nconst svg = MathJax.tex2svg('\\\\frac{1}{x^2-1}', {display: true});\nconsole.log(MathJax.startup.adaptor.outerHTML(svg));\n}).catch((err) =&gt; console.log(err.message));\n</code></pre> <p>Note: this technique is for node-based application only, not for browser applications.  This method sets up an alternative DOM implementation, which you don't need in the browser, and tells MathJax to use node's <code>require()</code> command to load external modules.  This setup will not work properly in the browser, even if you webpack it or bundle it in other ways.</p> <p>See the documentation and the MathJax Node Repository for more details.</p>"},{"location":"static/node_modules/mathjax/#reducing-the-size-of-the-components-directory","title":"Reducing the Size of the Components Directory","text":"<p>Since the <code>es5</code> directory contains all the component files, so if you are only planning one use one configuration, you can reduce the size of the MathJax directory by removing unused components. For example, if you are using the <code>tex-chtml.js</code> component, then you can remove the <code>tex-mml-chtml.js</code>, <code>tex-svg.js</code>, <code>tex-mml-svg.js</code>, <code>tex-chtml-full.js</code>, and <code>tex-svg-full.js</code> configurations, which will save considerable space.  Indeed, you should be able to remove everything other than <code>tex-chtml.js</code>, and the <code>input/tex/extensions</code>, <code>output/chtml/fonts/woff-v2</code>, <code>adaptors</code>, <code>a11y</code>, and <code>sre</code> directories.  If you are using the results only on the web, you can remove <code>adaptors</code> as well.</p> <p>If you are not using A11Y support (e.g., speech generation, or semantic enrichment), then you can remove <code>a11y</code> and <code>sre</code> as well (though in this case you may need to disable the assistive tools in the MathJax contextual menu in order to avoid MathJax trying to load them when they aren't there).</p> <p>If you are using SVG rather than CommonHTML output (e.g., <code>tex-svg.js</code> rather than <code>tex-chtml.js</code>), you can remove the <code>output/chtml/fonts/woff-v2</code> directory.  If you are using MathML input rather than TeX (e.g., <code>mml-chtml.js</code> rather than <code>tex-chtml.js</code>), then you can remove <code>input/tex/extensions</code> as well.</p>"},{"location":"static/node_modules/mathjax/#the-component-files-and-pull-requests","title":"The Component Files and Pull Requests","text":"<p>The <code>es5</code> directory is generated automatically from the contents of the MathJax source repository.  You can rebuild the components using the command</p> <pre><code>npm run make-es5 --silent\n</code></pre> <p>Note that since the contents of this repository are generated automatically, you should not submit pull requests that modify the contents of the <code>es5</code> directory.  If you wish to submit a modification to MathJax, you should make a pull request in the MathJax source repository.</p>"},{"location":"static/node_modules/mathjax/#mathjax-community","title":"MathJax Community","text":"<p>The main MathJax website is http://www.mathjax.org, and it includes announcements and other important information.  A MathJax user forum for asking questions and getting assistance is hosted at Google, and the MathJax bug tracker is hosted at GitHub.</p> <p>Before reporting a bug, please check that it has not already been reported.  Also, please use the bug tracker (rather than the help forum) for reporting bugs, and use the user's forum (rather than the bug tracker) for questions about how to use MathJax.</p>"},{"location":"static/node_modules/mathjax/#mathjax-resources","title":"MathJax Resources","text":"<ul> <li>MathJax Documentation</li> <li>MathJax Components</li> <li>MathJax Source Code</li> <li>MathJax Web Examples</li> <li>MathJax Node Examples</li> <li>MathJax Bug Tracker</li> <li>MathJax Users' Group</li> </ul>"}]}